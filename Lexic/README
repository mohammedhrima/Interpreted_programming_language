986 / 30 => 30 page per day
- Mar 11, 01:29 -> April 11
- build an AI,
- build IDE

+ implements some algorithms in the future
+ man for algorithms
+ LLAMA, Occs, tools to visualize parsing


- compiler :
    program contains chunks called passes
    create an image from source code file , (proessing, assembly, linking)

- Lexical Analyzer:
    take token, while. for, >= >> ...
    turn them to tree

- temporary varibales to hold value while changing
- BNF: Backus-Naur Form : end of line


$ : end of symbol

statements -> expression;$ | expression;$ statement
expression -> term expression' 
expression' -> +term expression' | eps
term -> factor term'
term' -> *factor term' | eps
factor -> NUM_OR_ID  | expression

- use temporary varibales
- should be reeused

Lex:

"Let's Build a Compiler" by Jack Crenshaw: This is a classic tutorial that walks you through the process of building a simple compiler from scratch. It's written in a friendly, accessible style and assumes no prior knowledge of compiler development. The tutorial is available online for free at http://compilers.iecc.com/crenshaw/.

"Writing a Compiler in C" by Robert Swierczek: This is another tutorial that walks you through the process of building a simple compiler in C. It's more in-depth than Crenshaw's tutorial and assumes some knowledge of programming concepts, but it's still very approachable. The tutorial is available online for free at https://norasandler.com/2017/11/29/Write-a-Compiler.html.

"Crafting Interpreters" by Bob Nystrom: While not specifically focused on compiler development, this book walks you through the process of building a simple programming language interpreter from scratch using C. It covers many of the same concepts as compiler development and is written in a clear, approachable style. The book is available online for free at https://craftinginterpreters.com/.